(define (fac n)
    (define zero 0)
    (define (foo x) (bar x))
    (define (bar y) (foo y))
    (define ident (+ zero 1))
    (let ((x 3)) (set! zero (- 3 x)))
    ((lambda (x) (set! zero (- 3 x))) 3)
    (if (> n 0) 
        (* n (fac (- n 1)))
        ident))
(define (q x . y) (append x y))
(define (test x y . z) (cons (+ x y) z))
(test 1 4 3 5 1 "String")
(set! test fac)
(test 2)
(define cond)
(if (= cond #t) (* 1 1))