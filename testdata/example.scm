(define (fac n)
    (define zero 0)
    (define (foo x) (bar x))
    (define (bar y) (foo y))
    (define ident (+ zero 1))
    (let ((x 3)) (set! zero (- 3 x)))
    ((lambda (x) (set! zero (- 3 x))) 3)
    (if (> n 0) 
        (* n (fac (- n 1)))
        ident))
;(define (q x . y) (append x y))
;(define (test1 x y . z) (cons (+ x y) z))
;(define n_list `(Hallo ich bin eine Liste ,(* 2 (fac 7))))
;(test1 1 4 3 5 1 "String")
;(set! test1 fac)
;(test1 2)
(define cond)
(if cond (* 1 1))
;
;(define (append ls x) (if (= cdr '()) (set-cdr! ls (cons x '())) (append (cdr ls) x)))